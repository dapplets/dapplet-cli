#!/usr/bin/env node

const program = require('commander');
const pkg = require('../package.json');
const cli = require('../lib/dapplet-cli');

program
    .version(pkg.version)
    .option('-r, --registry [address]', 'set the registry endpoint address. default: https://test.dapplets.org')
    .option('-a, --account <account>', 'set the account name')
    .option('-k, --key <key>', 'set the account key');

program
    .command('deploy')
    .option('-A, --archive', 'publish archive modules from "archive" folder')
    .option('-S, --swarm', 'save modules to Swarm')
    .description('run deploy of module to registry')
    .action(async function (options) {
        let registry = program.registry || process.env.DAPPLET_CLI_REGISTRY || "https://test.dapplets.org";
        let account = program.account || process.env.DAPPLET_CLI_ACCOUNT;
        let key = program.key || process.env.DAPPLET_CLI_KEY;

        if (!account) return console.error("account is required");
        if (!key) return console.error("key is required");

        registry = registry.trim();
        account = account.trim();
        key = key.trim();

        try {
            await cli.deploy(registry, account, key, options);
        } catch (err) {
            console.error(err.message);
        }
    });

program
    .command('add-site <hostname>')
    .description('add site-binding')
    .action(async function (hostname, options) {
        let registry = program.registry || process.env.DAPPLET_CLI_REGISTRY || "https://test.dapplets.org";
        let account = program.account || process.env.DAPPLET_CLI_ACCOUNT;
        let key = program.key || process.env.DAPPLET_CLI_KEY;

        if (!account) return console.error("account is required");
        if (!key) return console.error("key is required");
        if (!hostname) return console.error("hostname is required");

        registry = registry.trim();
        account = account.trim();
        key = key.trim();

        try {
            await cli.addSite(registry, account, key, hostname);
        } catch (err) {
            console.error(err.message);
        }
    });

program
    .on('command:*', function () {
        console.error('Invalid command: %s\nSee -h or --help for a list of available commands.', program.args.join(' '));
        process.exit(1);
    });

program.parse(process.argv);

var NO_COMMAND_SPECIFIED = program.args.length === 0;

if (NO_COMMAND_SPECIFIED) {
    program.help();
}